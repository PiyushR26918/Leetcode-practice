// Memoization
class Solution {
    public int tribonacci(int n) {
       Integer[] dp = new Integer[n+1];
       return helper(n, dp); 
    }
    int helper(int n, Integer[] dp){
        if (n==0 || n==1){
            return n;
        }
        if(n==2){
            return 1;
        }
        if (dp[n] != null){
            return dp[n];
        }
        int sum = tribonacci(n-1) + tribonacci(n-2) + tribonacci(n-3);
        dp[n] = sum;
        return sum;
    }
}
// Tabulation
class Solution {
    public int tribonacci(int n) {
        int[] trib = new int[n+1];
        if (n==0 || n==1){
            return n;
        }
        if (n==2){
            return 1;
        }
        trib[0] = 0;
        trib[1] = 1;
        trib[2] = 1;
        
        for(int i=3; i<=n; i++){
            trib[i] = trib[i-1] + trib[i-2] + trib[i-3];
        }
        return trib[n];
        
    }
}
