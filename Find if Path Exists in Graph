class Solution {
    public boolean validPath(int n, int[][] edges, int source, int destination) {
        boolean[] visited = new boolean[n];
        List<List<Integer>> adj = new ArrayList<>();
        for (int i=0; i<n; i++){
            adj.add(new ArrayList<>());
        }
        for (int[] edge : edges){
            int a = edge[0];
            int b = edge[1];
            adj.get(a).add(b);
            adj.get(b).add(a);
        }
        return dfs(adj, source, destination, visited);        
    }
    boolean dfs (List<List<Integer>> adj, int source, int destination, boolean[] visited){
        if (source == destination){
            return true;
        }
        visited[source] = true;
        for (int neighbour : adj.get(source)){
            if (visited[neighbour] == false){
                if (dfs(adj, neighbour, destination, visited)){
                    return true;
                }
            }
            
        }
        return false;
    }
    
}
