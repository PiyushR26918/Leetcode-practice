class Solution {
    
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        Arrays.sort(candidates);
        List<List<Integer>> bigList = new ArrayList<>();
        List<Integer> smallList = new ArrayList<>();
        helper(candidates , target, 0, bigList, smallList);
        return bigList;
            
    }
    void helper(int[] candidates, int target, int index, List<List<Integer>> bigList, List<Integer> smallList){
     if (target == 0){
       bigList.add(new ArrayList<Integer>(smallList));
       return;
      }
        if (target < candidates[index]){
            return;
        }
        for (int i=index; i<candidates.length; i++){
            smallList.add(candidates[i]);
            helper(candidates, target-candidates[i], i, bigList, smallList);
            smallList.remove(smallList.size() - 1);
            
        }
    }
}
